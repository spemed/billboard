{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport function post() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (url == \"\") {\n    throw Error(\"invalid url\");\n  }\n\n  return fetch(url, {\n    method: method,\n    headers: _objectSpread({\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }, headers),\n    body: JSON.stringify(params)\n  });\n}\nexport function get() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (url == \"\") {\n    throw Error(\"invalid url\");\n  }\n\n  str = \"\";\n\n  for (key in params) {\n    str += key + \"&\" + params[key];\n  }\n\n  return fetch(url + escape(str), {\n    method: \"get\",\n    headers: _objectSpread({\n      Charset: \"utf8\"\n    }, headers)\n  });\n}","map":{"version":3,"sources":["/Users/yangruiyang/react-native/billboard/src/api/base.js"],"names":["post","url","params","headers","Error","fetch","method","Accept","body","JSON","stringify","get","str","key","escape","Charset"],"mappings":";;;;;;AAMA,OAAO,SAASA,IAAT,GAAmD;AAAA,MAArCC,GAAqC,uEAA/B,EAA+B;AAAA,MAA3BC,MAA2B,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACtD,MAAIF,GAAG,IAAI,EAAX,EAAe;AACX,UAAMG,KAAK,CAAC,aAAD,CAAX;AACH;;AACD,SAAOC,KAAK,CAACJ,GAAD,EAAM;AACdK,IAAAA,MAAM,EAANA,MADc;AAEdH,IAAAA,OAAO;AACLI,MAAAA,MAAM,EAAE,kBADH;AAEN,sBAAgB;AAFV,OAGFJ,OAHE,CAFO;AAOdK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,MAAf;AAPQ,GAAN,CAAZ;AASH;AAQD,OAAO,SAASS,GAAT,GAA8C;AAAA,MAAjCV,GAAiC,uEAA3B,EAA2B;AAAA,MAAxBC,MAAwB,uEAAf,EAAe;AAAA,MAAZC,OAAY,uEAAJ,EAAI;;AACjD,MAAIF,GAAG,IAAI,EAAX,EAAe;AACX,UAAMG,KAAK,CAAC,aAAD,CAAX;AACH;;AACDQ,EAAAA,GAAG,GAAG,EAAN;;AACA,OAAKC,GAAL,IAAYX,MAAZ,EAAoB;AAChBU,IAAAA,GAAG,IAAOC,GAAP,SAAcX,MAAM,CAACW,GAAD,CAAvB;AACH;;AACD,SAAOR,KAAK,CAACJ,GAAG,GAACa,MAAM,CAACF,GAAD,CAAX,EAAkB;AAC1BN,IAAAA,MAAM,EAAE,KADkB;AAE1BH,IAAAA,OAAO;AACHY,MAAAA,OAAO,EAAC;AADL,OAEAZ,OAFA;AAFmB,GAAlB,CAAZ;AAOH","sourcesContent":["/**\n * \n * @param {*} url \n * @param {*} method \n * @param {*} param \n */\nexport function post(url = \"\", params = {}, headers = {}) {\n    if( url == \"\" ){\n        throw Error(\"invalid url\")\n    }\n    return fetch(url, {\n        method,\n        headers: {\n          Accept: 'application/json',\n         'Content-Type': 'application/json',\n          ...headers,\n        },\n        body: JSON.stringify(params),\n    })\n}\n\n/**\n * \n * @param {*} url \n * @param {*} method \n * @param {*} param \n */\nexport function get(url = \"\",params = {},headers={}) {\n    if( url == \"\" ){\n        throw Error(\"invalid url\")\n    }\n    str = \"\"\n    for (key in params) {\n        str += `${key}&${params[key]}`\n    }\n    return fetch(url+escape(str), {\n        method: \"get\",\n        headers: {\n            Charset:\"utf8\",\n            ...headers,\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}