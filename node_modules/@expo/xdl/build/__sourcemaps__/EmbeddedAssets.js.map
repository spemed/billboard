{"version":3,"sources":["EmbeddedAssets.ts"],"names":["configureAsync","config","_maybeWriteArtifactsToDiskAsync","_maybeConfigureExpoKitEmbeddedAssetsAsync","_maybeConfigureExpoUpdatesEmbeddedAssetsAsync","getEmbeddedManifestPath","platform","projectRoot","exp","ios","publishManifestPath","_getDefaultEmbeddedManifestPath","android","path","join","_getDefaultEmbeddedAssetDir","_getDefaultEmbeddedBundlePath","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","Error","pkg","iosManifest","iosBundle","iosSourceMap","androidManifest","androidBundle","androidSourceMap","androidBundlePath","androidManifestPath","androidSourceMapPath","iosBundlePath","iosManifestPath","iosSourceMapPath","dependencies","target","defaultAndroidDir","defaultIosDir","fs","ensureDir","existsSync","logger","global","warn","publishBundlePath","publishSourceMapPath","JSON","stringify","releaseChannel","androidManifestUrl","IosPlist","modifyAsync","shellPlist","constantsPath","ExponentTools","deleteLinesInFileAsync","regexFileAsync","bundleUrl","iosManifestUrl","configPlist","EXUpdatesURL","EXUpdatesSDKVersion","sdkVersion","EXUpdatesReleaseChannel","androidManifestXmlPath","androidManifestXmlFile","readFileSync","expoUpdateUrlRegex","expoSdkVersionRegex","expoReleaseChannelRegex","expoUpdateUrlTag","expoSdkVersionTag","expoReleaseChannelTag","tagsToInsert","search","push","length"],"mappings":"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","sourcesContent":["import { ExpoConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as IosPlist from './detach/IosPlist';\n// @ts-ignore IosWorkspace not yet converted to TypeScript\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport StandaloneContext from './detach/StandaloneContext';\nimport logger from './Logger';\nimport { writeArtifactSafelyAsync } from './tools/ArtifactUtils';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: PublicConfig;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string;\n  iosSourceMap: string | null;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string;\n  androidSourceMap: string | null;\n  target: ProjectTarget;\n};\n\ntype PublicConfig = ExpoConfig & {\n  sdkVersion: string;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: PublicConfig\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: PublicConfig\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: PublicConfig\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: PublicConfig\n): string {\n  if (platform === 'ios') {\n    const context = StandaloneContext.createUserContext(projectRoot, exp);\n    const { supportingDirectory } = IosWorkspace.getPaths(context);\n    return supportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let androidSourceMapPath;\n  let iosBundlePath;\n  let iosManifestPath;\n  let iosSourceMapPath;\n\n  // set defaults for expo-updates\n  if (pkg.dependencies['expo-updates'] && config.target !== 'managed') {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android && exp.android.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android && exp.android.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.android && exp.android.publishSourceMapPath) {\n    androidSourceMapPath = exp.android.publishSourceMapPath;\n  }\n  if (exp.ios && exp.ios.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios && exp.ios.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    iosSourceMapPath = exp.ios.publishSourceMapPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (androidSourceMapPath && androidSourceMap) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      androidSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n\n  if (iosSourceMapPath && iosSourceMap) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      iosSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  let constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\nasync function _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS expo-updates\n  if (fs.existsSync(path.join(supportingDirectory, 'Expo.plist'))) {\n    // This is an app with expo-updates installed, set properties in Expo.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', (configPlist: any) => {\n      configPlist.EXUpdatesURL = iosManifestUrl;\n      configPlist.EXUpdatesSDKVersion = exp.sdkVersion;\n      if (releaseChannel) {\n        configPlist.EXUpdatesReleaseChannel = releaseChannel;\n      }\n      return configPlist;\n    });\n  }\n\n  // Android expo-updates\n  let androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  let androidManifestXmlFile = fs.readFileSync(androidManifestXmlPath, 'utf8');\n  let expoUpdateUrlRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_UPDATE_URL\"[^>]+\\/>/;\n  let expoSdkVersionRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_SDK_VERSION\"[^>]+\\/>/;\n  let expoReleaseChannelRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_RELEASE_CHANNEL\"[^>]+\\/>/;\n\n  let expoUpdateUrlTag = `<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"${androidManifestUrl}\" />`;\n  let expoSdkVersionTag = `<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"${exp.sdkVersion}\" />`;\n  let expoReleaseChannelTag = `<meta-data android:name=\"expo.modules.updates.EXPO_RELEASE_CHANNEL\" android:value=\"${releaseChannel}\" />`;\n\n  let tagsToInsert = [];\n  if (androidManifestXmlFile.search(expoUpdateUrlRegex) < 0) {\n    tagsToInsert.push(expoUpdateUrlTag);\n  }\n  if (androidManifestXmlFile.search(expoSdkVersionRegex) < 0) {\n    tagsToInsert.push(expoSdkVersionTag);\n  }\n  if (releaseChannel && androidManifestXmlFile.search(expoReleaseChannelRegex) < 0) {\n    tagsToInsert.push(expoReleaseChannelTag);\n  }\n  if (tagsToInsert.length) {\n    // try to insert the meta-data tags that aren't found\n    await ExponentTools.regexFileAsync(\n      /<activity\\s+android:name=\".MainActivity\"/,\n      `${tagsToInsert.join('\\n      ')}\n\n  <activity\n    android:name=\".MainActivity\"`,\n      androidManifestXmlPath\n    );\n  }\n  await ExponentTools.regexFileAsync(expoUpdateUrlRegex, expoUpdateUrlTag, androidManifestXmlPath);\n  await ExponentTools.regexFileAsync(\n    expoSdkVersionRegex,\n    expoSdkVersionTag,\n    androidManifestXmlPath\n  );\n  if (releaseChannel) {\n    await ExponentTools.regexFileAsync(\n      expoReleaseChannelRegex,\n      expoReleaseChannelTag,\n      androidManifestXmlPath\n    );\n  }\n}\n"],"file":"../EmbeddedAssets.js","sourceRoot":"/@expo/xdl@57.8.20/src"}