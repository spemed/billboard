{"version":3,"sources":["Project.ts"],"names":["EXPO_CDN","MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","_cachedSignedManifest","manifestString","signedManifest","currentStatus","projectDir","packagerPort","expoServerPort","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","hostnames","_getForPlatformAsync","platform","errorCode","minLength","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_resolveGoogleServicesFile","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","_resolveManifestAssets","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","logMethod","logWarning","_requireFromProject","modulePath","exp","fullPath","require","getSlugAsync","skipSDKVersionRequirement","slug","getLatestReleaseAsync","options","result","process","env","EXPO_LEGACY_API","formData","FormData","append","owner","releaseChannel","Api","callMethodAsync","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","postAsync","count","queryResult","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","join","stringify","exportForAppHosting","publicUrl","assetUrl","_validatePackagerReadyAsync","defaultTarget","target","publishOptions","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","pkg","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","uuid","v4","hashIds","HashIds","v1","revisionId","encode","now","developer","tool","username","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","androidManifest","bundleUrl","dependencies","Object","keys","iosManifest","iosSourceMap","androidSourceMap","dumpSourcemap","_buildSourceMapsAsync","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","EmbeddedAssets","configureAsync","iosManifestUrl","androidManifestUrl","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","_saveAssetAsync","paths","files","fileHashes","keyChunks","key","logDebug","quiet","assetPath","p","findReusableBuildAsync","getCurrentUserAsync","buildReuseStatus","publishAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","postPublish","hook","file","fn","_fn","_fetchAndUploadAssetsAsync","hasHooks","shouldPublishAndroidMaps","publishSourceMapPath","shouldPublishIosMaps","_maybeBuildSourceMapsAsync","force","_uploadArtifactsAsync","serverError","Sentry","captureException","publishManifestPath","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","config","then","warn","stack","fullManifestUrl","replace","isKernel","_handleKernelPublishedAsync","uploadFormDataAsync","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","toString","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPoint","publishUrl","constructPublishUrlAsync","undefined","sourceMapUrl","constructSourceMapUrlAsync","_collectAssets","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","androidAssetsJson","manifestAssets","absolutePath","iosAssets","androidAssets","concat","_configureExpForAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","add","type","assetCdnPath","uploadAssetsAsync","hostedUrl","kernelBundleUrl","scheme","host","kernel","androidManifestPath","writeFile","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","getConfigAsync","configName","configPrefix","ThirdParty","getManifest","_validateManifest","bundleIdentifier","package","_validateOptions","current","boolean","mode","any","valid","expIds","array","regex","_getExpAsync","version","name","toLowerCase","getBuildStatusAsync","startBuildAsync","putAsync","buildAsync","_waitForRunningAsync","retries","test","METRO_VERBOSE_WARNING","NODE_12_WINDOWS_METRO_ERROR","NODE_12_WINDOWS_METRO_SUGGESTION","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","includes","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","args","obj","logLevel","getLogger","tag","groupDepth","shouldHide","includesStack","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","__dirname","sourceExtsConfig","isTS","isReact","isModern","sourceExts","nonPersistent","Versions","lteSdkVersion","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","cliOpts","val","EXPO_DEBUG","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","nodePathEnv","NODE_PATH","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","directory","parentDirectory","dirname","delimiter","blacklistedEnvironmentVariables","shouldExposeEnvironmentVariableInManifest","has","toUpperCase","startExpoServerAsync","stopExpoServerAsync","app","use","express","json","limit","urlencoded","extended","ConnectionStatus","isOffline","validateWithoutNetworkAsync","manifestHandler","req","res","bundleUrlPackagerOpts","xde","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","encodeURI","encodeURIComponent","hostname","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","unsignedManifest","signature","publishInfo","getPublishInfoAsync","hostInfo","server","serverVersion","serverDriver","serverOS","os","serverOSVersion","release","send","post","close","expRc","manifestPort","listen","address","saveRecentExpRootAsync","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","number","integer","getUrlAsync","startAsync","EXPO_TARGET","webOnly","Webpack","restartAsync","DevSession","startSession","_stopInternalAsync","stopSession","stopAsync","stopWebOnlyAsync","setTimeout","webpackServerPort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAYA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;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","sourcesContent":["import {\n  ExpoConfig,\n  PackageJSONConfig,\n  Platform,\n  ProjectTarget,\n  configFilename,\n  getConfig,\n  getDefaultTarget,\n  readExpRcAsync,\n  resolveModule,\n} from '@expo/config';\n\nimport slug from 'slugify';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport JsonFile from '@expo/json-file';\nimport ngrok from '@expo/ngrok';\nimport axios from 'axios';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport decache from 'decache';\nimport delayAsync from 'delay-async';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport { AddressInfo } from 'net';\nimport os from 'os';\nimport path from 'path';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport urljoin from 'url-join';\nimport { promisify } from 'util';\nimport uuid from 'uuid';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport { writeArtifactSafelyAsync } from './tools/ArtifactUtils';\nimport Config from './Config';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as DevSession from './DevSession';\nimport * as EmbeddedAssets from './EmbeddedAssets';\nimport { maySkipManifestValidation } from './Env';\nimport { ErrorCode } from './ErrorCode';\nimport * as Exp from './Exp';\nimport logger from './Logger';\nimport * as ExpSchema from './project/ExpSchema';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Sentry from './Sentry';\nimport * as ThirdParty from './ThirdParty';\nimport FormData from './tools/FormData';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME, User } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport * as Webpack from './Webpack';\nimport XDLError from './XDLError';\n\nimport * as Doctor from './project/Doctor';\nimport * as IosPlist from './detach/IosPlist';\n// @ts-ignore IosWorkspace not yet converted to TypeScript\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport { ConnectionStatus } from './xdl';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\ntype Asset =\n  | { fileHashes: string[]; files: string[]; hash: string }\n  | {\n      __packager_asset: true;\n      fileHashes: string[];\n      files: string[];\n      fileSystemLocation: string;\n      hash: string;\n      httpServerLocation: string;\n      name: string;\n      scales: number[];\n      type: string;\n    };\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype PublicConfig = ExpoConfig & {\n  sdkVersion: string;\n};\n\ntype SelfHostedIndex = PublicConfig & {\n  dependencies: string[];\n};\n\nexport type StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\ntype PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n};\n\ntype PackagerOptions = {\n  dev: boolean;\n  minify: boolean;\n};\n\ntype HookArguments = {\n  config: any;\n  url: any;\n  exp: PublicConfig;\n  iosBundle: string;\n  iosSourceMap: string | null;\n  iosManifest: any;\n  androidBundle: string;\n  androidSourceMap: string | null;\n  androidManifest: any;\n  projectRoot: string;\n  log: (msg: any) => void;\n};\n\ntype PostPublishHook = {\n  file: string;\n  config: any;\n  _fn: (input: HookArguments) => any;\n};\n\ntype Release = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  publishedTime: string;\n  platform: string;\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(\n  projectRoot: string\n): Promise<{ url: string; isUrlFallback: false }> {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot: string) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart: number) {\n  let port = await freeportAsync(rangeStart, { hostnames: [null, 'localhost'] });\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(\n  projectRoot: string,\n  url: string,\n  platform: Platform,\n  { errorCode, minLength }: { errorCode: ErrorCode; minLength?: number }\n): Promise<string> {\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${error.response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios && manifest.ios.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(\n  projectRoot: string,\n  manifest: PublicConfig,\n  resolver: (assetPath: string) => Promise<string>,\n  strict = false\n) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (\n      await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion)\n    ).filter((assetSchema: ExpSchema.AssetSchema) => get(manifest, assetSchema.fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async (assetSchema: ExpSchema.AssetSchema) => {\n        const pathOrURL = get(manifest, assetSchema.fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = assetSchema.fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((assetSchema: ExpSchema.AssetSchema, index: number) =>\n      set(manifest, assetSchema.fieldPath + 'Url', urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath: string, projectRoot: string, exp: ExpoConfig) {\n  try {\n    let fullPath = resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\n// TODO: Move to @expo/config\nexport async function getSlugAsync(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  if (exp.slug) {\n    return exp.slug;\n  }\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `Your project config in ${projectRoot} must contain a \"slug\" field. Please supply this in your app.config.js or app.json`\n  );\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string;\n    platform: string;\n    owner?: string;\n  }\n): Promise<Release | null> {\n  let result;\n  if (process.env.EXPO_LEGACY_API === 'true') {\n    // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n    let formData = new FormData();\n    formData.append('queryType', 'history');\n    formData.append('slug', await getSlugAsync(projectRoot));\n    if (options.owner) {\n      formData.append('owner', options.owner);\n    }\n    formData.append('version', '2');\n    formData.append('count', '1');\n    formData.append('releaseChannel', options.releaseChannel);\n    formData.append('platform', options.platform);\n    result = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n      formData,\n    });\n  } else {\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    result = await api.postAsync('publish/history', {\n      owner: options.owner,\n      slug: await getSlugAsync(projectRoot),\n      releaseChannel: options.releaseChannel,\n      count: 1,\n      platform: options.platform,\n    });\n  }\n  const { queryResult } = result;\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n): Promise<void> {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes: SelfHostedIndex[] = [];\n  const iosIndexes: SelfHostedIndex[] = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath: string, accumulator: SelfHostedIndex[]) => {\n      const index = (await JsonFile.readAsync(indexPath)) as SelfHostedIndex;\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = (indexes: SelfHostedIndex[]) => {\n    return indexes.sort((index1: SelfHostedIndex, index2: SelfHostedIndex) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: PublishOptions;\n  } = {}\n): Promise<void> {\n  await _validatePackagerReadyAsync(projectRoot);\n  const defaultTarget = getDefaultTarget(projectRoot);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap: { [hash: string]: Asset } = {};\n    assets.forEach((asset: Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n  exp.releaseId = uuid.v4();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  const androidManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', androidBundleUrl),\n    platform: 'android',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(androidManifest)\n  );\n\n  // save the ios manifest\n  const iosManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', iosBundleUrl),\n    platform: 'ios',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(iosManifest)\n  );\n\n  let iosSourceMap = null;\n  let androidSourceMap = null;\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    ({ iosSourceMap, androidSourceMap } = await _buildSourceMapsAsync(projectRoot));\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n\n  // configure embedded assets for expo-updates or ExpoKit\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    iosManifestUrl: urljoin(publicUrl, 'ios-index.json'),\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: urljoin(publicUrl, 'android-index.json'),\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string; canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: PublishOptions = {}\n): Promise<{ url: string; ids: string[]; err?: string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const target = options.target ?? getDefaultTarget(projectRoot);\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks: PostPublishHook[] = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach((hook: any) => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  const hasHooks = validPostPublishHooks.length > 0;\n\n  const shouldPublishAndroidMaps = !!exp.android && !!exp.android.publishSourceMapPath;\n\n  const shouldPublishIosMaps = !!exp.ios && !!exp.ios.publishSourceMapPath;\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: hasHooks || shouldPublishAndroidMaps || shouldPublishIosMaps,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  let androidManifest = {};\n  let iosManifest = {};\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath) ||\n    pkg.dependencies['expo-updates']\n  ) {\n    [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n  }\n\n  const fullManifestUrl = response.url.replace('exp://', 'https://');\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    releaseChannel: options.releaseChannel ?? 'default',\n    iosManifestUrl: fullManifestUrl,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: fullManifestUrl,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({\n  exp,\n  iosBundle,\n  androidBundle,\n  options,\n  pkg,\n}: {\n  exp: ExpoConfig;\n  iosBundle: string;\n  androidBundle: string;\n  options: PublishOptions;\n  pkg: PackageJSONConfig;\n}) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n\n  let response: any;\n  if (process.env.EXPO_LEGACY_API === 'true') {\n    response = await Api.callMethodAsync('publish', null, 'put', null, { formData });\n  } else {\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    response = await api.uploadFormDataAsync('publish/new', formData);\n  }\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(\n  projectRoot: string,\n  options: PublishOptions\n): Promise<{\n  exp: PublicConfig;\n  pkg: PackageJSONConfig;\n}> {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  const { exp, pkg } = getConfig(projectRoot);\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  const { sdkVersion } = exp;\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp: { ...exp, sdkVersion: sdkVersion! }, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot: string, opts?: PackagerOptions) {\n  const entryPoint = Exp.determineEntryPoint(projectRoot);\n  const publishUrl = await UrlUtils.constructPublishUrlAsync(\n    projectRoot,\n    entryPoint,\n    undefined,\n    opts\n  );\n\n  logger.global.info('Building iOS bundle');\n  const iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  const androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\nasync function _maybeBuildSourceMapsAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  options = { force: false }\n) {\n  if (options.force) {\n    return _buildSourceMapsAsync(projectRoot);\n  } else {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _buildSourceMapsAsync(projectRoot: string) {\n  let entryPoint = Exp.determineEntryPoint(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedAssetPrefix: string\n): Promise<Asset[]> {\n  let entryPoint = Exp.determineEntryPoint(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async (assetPath: string) => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoConfig, assets: Asset[]) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot: string, exp: PublicConfig) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedUrl: string,\n  outputDir: string\n) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _handleKernelPublishedAsync({\n  projectRoot,\n  user,\n  exp,\n  url,\n}: {\n  projectRoot: string;\n  user: User;\n  exp: ExpoConfig;\n  url: string;\n}) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  let result;\n  if (process.env.EXPO_LEGACY_API === 'true') {\n    result = await Api.callMethodAsync('assetsMetadata', [], 'post', { keys: Object.keys(paths) });\n  } else {\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    result = await api.postAsync('assets/metadata', { keys: Object.keys(paths) });\n  }\n  const metas = result.metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n\n      if (process.env.EXPO_LEGACY_API === 'true') {\n        await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n      } else {\n        const user = await UserManager.ensureLoggedInAsync();\n        const api = ApiV2.clientForUser(user);\n        await api.uploadFormDataAsync('assets/upload', formData);\n      }\n    })\n  );\n}\n\ntype GetExpConfigOptions = {\n  current?: boolean;\n  mode?: string;\n  platform?: 'android' | 'ios' | 'all';\n  expIds?: string[];\n  type?: string;\n  releaseChannel?: string;\n  bundleIdentifier?: string;\n  publicUrl?: string;\n  sdkVersion?: string;\n};\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'platform'> = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = getConfig(projectRoot);\n    const configName = configFilename(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: configFilename(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\n// TODO(ville): add the full type\ntype BuildJob = unknown;\n\nexport type BuildStatusResult = {\n  jobs: BuildJob[];\n  err: null;\n  userHasBuiltAppBefore: boolean;\n  userHasBuiltExperienceBefore: boolean;\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nexport type BuildCreatedResult = {\n  id: string;\n  ids: string[];\n  priority: 'normal' | 'high';\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nfunction _validateManifest(options: any, exp: any, configName: string, configPrefix: string) {\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n}\nfunction _validateOptions(options: any) {\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n}\n\nasync function _getExpAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'mode' | 'platform'>\n) {\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && 'version' in pkg && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.name && 'name' in pkg && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n  return { exp, configName, configPrefix };\n}\n\nexport async function getBuildStatusAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildStatusResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp } = await _getExpAsync(projectRoot, options);\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('build/status', { manifest: exp, options });\n}\n\nexport async function startBuildAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildCreatedResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp, configName, configPrefix } = await _getExpAsync(projectRoot, options);\n  _validateManifest(options, exp, configName, configPrefix);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.putAsync('build/start', { manifest: exp, options });\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildStatusResult | BuildCreatedResult> {\n  /**\n    This function corresponds to an apiv1 call and is deprecated.\n    Use \n      * startBuildAsync\n      * getBuildStatusAsync\n    to call apiv2 instead.\n   */\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  _validateOptions(options);\n  const { exp, configName, configPrefix } = await _getExpAsync(projectRoot, options);\n  if (options.mode === 'create') {\n    _validateManifest(options, exp, configName, configPrefix);\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', { manifest: exp, options });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\n// The --verbose flag is intended for react-native-cli/metro, not expo-cli\nconst METRO_VERBOSE_WARNING = 'Run CLI with --verbose flag for more details.';\n\n// Remove these constants and related code when SDK35 isn't supported anymore\n// Context: https://github.com/expo/expo-cli/issues/1074\nconst NODE_12_WINDOWS_METRO_ERROR = `Invalid regular expression: /(.*\\\\__fixtures__\\\\.*|node_modules[\\\\\\]react[\\\\\\]dist[\\\\\\].*|website\\\\node_modules\\\\.*|heapCapture\\\\bundle\\.js|.*\\\\__tests__\\\\.*)$/: Unterminated character class`;\nconst NODE_12_WINDOWS_METRO_SUGGESTION = `\\nUnable to start the project due to a documented incompatibility between Node 12 LTS and Expo SDK 35 on Windows.\nPlease refer to this GitHub comment for a solution:\nhttps://github.com/expo/expo-cli/issues/1074#issuecomment-559220752\\n`;\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (output.includes(NODE_12_WINDOWS_METRO_ERROR)) {\n    ProjectUtils.logError(projectRoot, 'expo', NODE_12_WINDOWS_METRO_SUGGESTION);\n    return;\n  }\n\n  if (output.includes(METRO_VERBOSE_WARNING)) {\n    output = output.replace(METRO_VERBOSE_WARNING, '');\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of React Native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    const log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    ProjectUtils.getLogger(projectRoot)[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = getConfig(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  const customLogReporterPath: string = require.resolve(path.join(__dirname, 'reporter'));\n\n  // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    options.target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    sourceExts,\n  };\n\n  if (options.nonPersistent && Versions.lteSdkVersion(exp, '32.0.0')) {\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    // starting with SDK 37, we bundle this plugin with the expo-asset package instead of expo,\n    // so check there first and fall back to expo if we can't find it in expo-asset\n    try {\n      packagerOpts.assetPlugins = resolveModule(\n        'expo-asset/tools/hashAssetFiles',\n        projectRoot,\n        exp\n      );\n    } catch (e) {\n      packagerOpts.assetPlugins = resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n    }\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      // In order to prevent people from forgetting to include the .expo extension or other things\n      // NOTE(brentvatne): we should probably do away with packagerOpts soon in favor of @expo/metro-config!\n      sourceExts: uniq([...packagerOpts.sourceExts, ...(userPackagerOpts.sourceExts ?? [])]),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n\n  if (process.env.EXPO_DEBUG) {\n    cliOpts.push('--verbose');\n  }\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  const nodePathEnv = nodePath ? { NODE_PATH: nodePath } : {};\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n      ...nodePathEnv,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if (\n    (ConnectionStatus.isOffline()\n      ? await Doctor.validateWithoutNetworkAsync(projectRoot)\n      : await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL\n  ) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  }\n  // Serve the manifest.\n  const manifestHandler = async (req: express.Request, res: express.Response) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.readAsync(projectRoot);\n      let { exp: manifest } = getConfig(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let platform = (req.headers['exponent-platform'] || 'ios').toString();\n      let entryPoint = Exp.determineEntryPoint(projectRoot, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest as PublicConfig,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n\n            let signedManifest;\n            if (process.env.EXPO_LEGACY_API === 'true') {\n              signedManifest = await Api.callMethodAsync(\n                'signManifest',\n                [publishInfo.args],\n                'post',\n                manifest\n              );\n            } else {\n              const user = await UserManager.ensureLoggedInAsync();\n              const api = ApiV2.clientForUser(user);\n              signedManifest = await api.postAsync('manifest/sign', {\n                args: publishInfo.args,\n                manifest,\n              });\n            }\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('@expo/xdl/package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: ngrok.NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string): Promise<void> {\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number;\n  }\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\n\n// DEPRECATED(2019-08-21): use UrlUtils.constructManifestUrlAsync\nexport async function getUrlAsync(projectRoot: string, options: object = {}): Promise<string> {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  if (options.target) {\n    // EXPO_TARGET is used by @expo/metro-config to determine the target when getDefaultConfig is\n    // called from metro.config.js and the --target option is used to override the default target.\n    process.env.EXPO_TARGET = options.target;\n  }\n\n  let { exp } = getConfig(projectRoot);\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await Webpack.stopAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Closing Expo server');\n  await stopExpoServerAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Stopping Metro bundler');\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopWebOnlyAsync(projectDir: string): Promise<void> {\n  await Webpack.stopAsync(projectDir);\n  await DevSession.stopSession();\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"file":"../Project.js","sourceRoot":"/@expo/xdl@57.8.20/src"}