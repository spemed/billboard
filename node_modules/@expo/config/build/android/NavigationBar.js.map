{"version":3,"file":"NavigationBar.js","sourceRoot":"","sources":["../../src/android/NavigationBar.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAMkB;AAClB,qCAKkB;AAElB,4DAAyD;AAEzD,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,MAAM,2BAA2B,GAAG,kCAAkC,CAAC;AAEvE,SAAgB,6BAA6B,CAAC,MAAkB;;IAC9D,OAAO,OAAA,MAAM,CAAC,oBAAoB,0CAAE,OAAO,KAAI,IAAI,CAAC;AACtD,CAAC;AAFD,sEAEC;AAED,SAAgB,qBAAqB,CAAC,MAAkB;;IACtD,OAAO,OAAA,MAAM,CAAC,oBAAoB,0CAAE,eAAe,KAAI,IAAI,CAAC;AAC9D,CAAC;AAFD,sDAEC;AAED,SAAgB,qBAAqB,CAAC,MAAkB;;IACtD,OAAO,OAAA,MAAM,CAAC,oBAAoB,0CAAE,QAAQ,KAAI,eAAe,CAAC;AAClE,CAAC;AAFD,sDAEC;AAED,SAAsB,sBAAsB,CAAC,MAAkB,EAAE,gBAAwB;;QACvF,MAAM,aAAa,GAAG,6BAA6B,CAAC,MAAM,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAE/C,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;QACxE,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,UAAU,GAAG,MAAM,2BAAkB,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,UAAU,GAAG,MAAM,2BAAkB,CAAC,UAAU,CAAC,CAAC;QAEtD,IAAI,aAAa,EAAE;YACjB,iDAAiD;YACjD,qCAAiB,CACf,8BAA8B,EAC9B,8KAA8K,CAC/K,CAAC;SACH;QACD,IAAI,SAAS,EAAE;YACb,IAAI,cAAc,GAAc,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;YACtF,UAAU,GAAG,qBAAY,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YAEtD,IAAI,cAAc,GAAc;gBAC9B,EAAE,CAAC,EAAE,UAAU,oBAAoB,EAAE,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,oBAAoB,EAAE,EAAE,EAAE;aACxF,CAAC;YACF,UAAU,GAAG,sBAAa,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;SACxD;QACD,IAAI,QAAQ,KAAK,cAAc,EAAE;YAC/B,IAAI,sBAAsB,GAAc;gBACtC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,2BAA2B,EAAE,EAAE;aACxD,CAAC;YACF,UAAU,GAAG,sBAAa,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;SAChE;QAED,IAAI;YACF,MAAM,4BAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAClD,MAAM,4BAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;SACnD;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CACb,0EAA0E,UAAU,sBAAsB,UAAU,GAAG,CACxH,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AA9CD,wDA8CC","sourcesContent":["import {\n  XMLItem,\n  getProjectStylesXMLPathAsync,\n  readStylesXMLAsync,\n  setStylesItem,\n  writeStylesXMLAsync,\n} from './Styles';\nimport {\n  getProjectColorsXMLPathAsync,\n  readColorsXMLAsync,\n  setColorItem,\n  writeColorsXMLAsync,\n} from './Colors';\nimport { ExpoConfig } from '../Config.types';\nimport { addWarningAndroid } from '../WarningAggregator';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\nconst WINDOW_LIGHT_NAVIGATION_BAR = 'android:windowLightNavigationBar';\n\nexport function getNavigationBarImmersiveMode(config: ExpoConfig) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: ExpoConfig) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: ExpoConfig) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n\nexport async function setNavigationBarConfig(config: ExpoConfig, projectDirectory: string) {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  const hexString = getNavigationBarColor(config);\n  const barStyle = getNavigationBarStyle(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectDirectory);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectDirectory);\n  if (!colorsPath || !stylesPath) {\n    return false;\n  }\n\n  let stylesJSON = await readStylesXMLAsync(stylesPath);\n  let colorsJSON = await readColorsXMLAsync(colorsPath);\n\n  if (immersiveMode) {\n    // Immersive mode needs to be set programatically\n    addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.'\n    );\n  }\n  if (hexString) {\n    let colorItemToAdd: XMLItem[] = [{ _: hexString, $: { name: NAVIGATION_BAR_COLOR } }];\n    colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n\n    let styleItemToAdd: XMLItem[] = [\n      { _: `@color/${NAVIGATION_BAR_COLOR}`, $: { name: `android:${NAVIGATION_BAR_COLOR}` } },\n    ];\n    stylesJSON = setStylesItem(styleItemToAdd, stylesJSON);\n  }\n  if (barStyle === 'dark-content') {\n    let navigationBarStyleItem: XMLItem[] = [\n      { _: 'true', $: { name: WINDOW_LIGHT_NAVIGATION_BAR } },\n    ];\n    stylesJSON = setStylesItem(navigationBarStyleItem, stylesJSON);\n  }\n\n  try {\n    await writeColorsXMLAsync(colorsPath, colorsJSON);\n    await writeStylesXMLAsync(stylesPath, stylesJSON);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android navigation bar color. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"]}