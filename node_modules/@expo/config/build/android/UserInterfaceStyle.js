"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';
exports.ON_CONFIGURATION_CHANGED = `
public class MainActivity extends ReactActivity {

    // Added automatically by Expo Config
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        Intent intent = new Intent("onConfigurationChanged");
        intent.putExtra("newConfig", newConfig);
        sendBroadcast(intent);
    }
`;
function getUserInterfaceStyle(config) {
    var _a, _b;
    let result = (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.userInterfaceStyle, (_b !== null && _b !== void 0 ? _b : config.userInterfaceStyle));
    return (result !== null && result !== void 0 ? result : null);
}
exports.getUserInterfaceStyle = getUserInterfaceStyle;
function setUiModeAndroidManifest(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        let userInterfaceStyle = getUserInterfaceStyle(config);
        if (!userInterfaceStyle) {
            return manifestDocument;
        }
        let mainActivity = manifestDocument.manifest.application[0].activity.filter((e) => e['$']['android:name'] === '.MainActivity');
        mainActivity[0]['$'][exports.CONFIG_CHANGES_ATTRIBUTE] =
            'keyboard|keyboardHidden|orientation|screenSize|uiMode';
        return manifestDocument;
    });
}
exports.setUiModeAndroidManifest = setUiModeAndroidManifest;
function addOnConfigurationChangedMainActivity(config, MainActivity) {
    var _a;
    let userInterfaceStyle = getUserInterfaceStyle(config);
    if (!userInterfaceStyle) {
        return MainActivity;
    }
    // Cruzan: this is not ideal, but I'm not sure of a better way to handle writing to MainActivity.java
    if ((_a = MainActivity.match(`onConfigurationChanged`)) === null || _a === void 0 ? void 0 : _a.length) {
        return MainActivity;
    }
    let pattern = new RegExp(`public class MainActivity extends ReactActivity {`);
    return MainActivity.replace(pattern, exports.ON_CONFIGURATION_CHANGED);
}
exports.addOnConfigurationChangedMainActivity = addOnConfigurationChangedMainActivity;
//# sourceMappingURL=UserInterfaceStyle.js.map