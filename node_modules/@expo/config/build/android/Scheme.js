"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js_1 = require("xml2js");
function getScheme(config) {
    return typeof config.scheme === 'string' ? config.scheme : null;
}
exports.getScheme = getScheme;
function setScheme(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        let scheme = getScheme(config);
        if (!scheme) {
            return false;
        }
        let mainActivity = manifestDocument.manifest.application[0].activity.filter((e) => e['$']['android:name'] === '.MainActivity');
        const schemeTag = `<data android:scheme="${scheme}"/>`;
        const intentFiltersXML = `
  <intent-filter>
    ${schemeTag}
    <action android:name="android.intent.action.VIEW"/>
    <category android:name="android.intent.category.DEFAULT"/>
    <category android:name="android.intent.category.BROWSABLE"/>
  </intent-filter>`;
        const parser = new xml2js_1.Parser();
        const intentFiltersJSON = yield parser.parseStringPromise(intentFiltersXML);
        if (mainActivity[0].hasOwnProperty('intent-filter')) {
            mainActivity[0]['intent-filter'] = mainActivity[0]['intent-filter'].concat(intentFiltersJSON['intent-filter']);
        }
        else {
            mainActivity[0]['intent-filter'] = intentFiltersJSON['intent-filter'];
        }
        return manifestDocument;
    });
}
exports.setScheme = setScheme;
//# sourceMappingURL=Scheme.js.map