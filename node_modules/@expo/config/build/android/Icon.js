"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WarningAggregator_1 = require("../WarningAggregator");
function getIcon(config) {
    var _a;
    // Until we add support applying icon config we just test if the user has configured the icon
    // so we can warn
    if (config.icon || ((_a = config.android) === null || _a === void 0 ? void 0 : _a.icon)) {
        return true;
    }
    else {
        return false;
    }
}
exports.getIcon = getIcon;
function setIconAsync(config, projectRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        let icon = getIcon(config);
        if (!icon) {
            return;
        }
        WarningAggregator_1.addWarningAndroid('icon', 'This is the image that your app uses on your home screen, you will need to configure it manually.');
    });
}
exports.setIconAsync = setIconAsync;
//# sourceMappingURL=Icon.js.map