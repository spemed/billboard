"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requiredPermissions = [
    'android.permission.INTERNET',
    'android.permission.ACCESS_NETWORK_STATE',
    'android.permission.SYSTEM_ALERT_WINDOW',
    'android.permission.WAKE_LOCK',
    'com.google.android.c2dm.permission.RECEIVE',
];
exports.allPermissions = [
    ...exports.requiredPermissions,
    'android.permission.ACCESS_WIFI_STATE',
    'android.permission.ACCESS_COARSE_LOCATION',
    'android.permission.ACCESS_FINE_LOCATION',
    'android.permission.CAMERA',
    'android.permission.MANAGE_DOCUMENTS',
    'android.permission.READ_CONTACTS',
    'android.permission.WRITE_CONTACTS',
    'android.permission.READ_CALENDAR',
    'android.permission.WRITE_CALENDAR',
    'android.permission.READ_EXTERNAL_STORAGE',
    'android.permission.READ_INTERNAL_STORAGE',
    'android.permission.READ_PHONE_STATE',
    'android.permission.RECORD_AUDIO',
    'android.permission.USE_FINGERPRINT',
    'android.permission.VIBRATE',
    'android.permission.WRITE_EXTERNAL_STORAGE',
    'android.permission.READ_SMS',
    'com.anddoes.launcher.permission.UPDATE_COUNT',
    'com.android.launcher.permission.INSTALL_SHORTCUT',
    'com.google.android.gms.permission.ACTIVITY_RECOGNITION',
    'com.google.android.providers.gsf.permission.READ_GSERVICES',
    'com.htc.launcher.permission.READ_SETTINGS',
    'com.htc.launcher.permission.UPDATE_SHORTCUT',
    'com.majeur.launcher.permission.UPDATE_BADGE',
    'com.sec.android.provider.badge.permission.READ',
    'com.sec.android.provider.badge.permission.WRITE',
    'com.sonyericsson.home.permission.BROADCAST_BADGE',
];
function prefixAndroidPermissionsIfNecessary(permissions) {
    return permissions.map(permission => {
        if (!permission.includes('.')) {
            return `android.permission.${permission}`;
        }
        return permission;
    });
}
function getAndroidPermissions(config) {
    var _a, _b;
    return _b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.permissions, (_b !== null && _b !== void 0 ? _b : []);
}
exports.getAndroidPermissions = getAndroidPermissions;
function setAndroidPermissions(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        const permissions = getAndroidPermissions(config);
        let permissionsToAdd = [];
        if (permissions === null) {
            // Use all Expo permissions
            permissionsToAdd = exports.allPermissions;
        }
        else {
            // Use minimum required, plus any specified in permissions array
            const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);
            permissionsToAdd = [...providedPermissions, ...exports.requiredPermissions];
        }
        let manifestPermissions = [];
        if (!manifestDocument.manifest.hasOwnProperty('uses-permission')) {
            manifestDocument.manifest['uses-permission'] = [];
        }
        manifestPermissions = manifestDocument.manifest['uses-permission'];
        permissionsToAdd.forEach(permission => {
            if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {
                addPermissionToManifest(permission, manifestPermissions);
            }
        });
        return manifestDocument;
    });
}
exports.setAndroidPermissions = setAndroidPermissions;
function isPermissionAlreadyRequested(permission, manifestPermissions) {
    const hasPermission = manifestPermissions.filter((e) => e['$']['android:name'] === permission);
    return hasPermission.length > 0;
}
exports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;
function addPermissionToManifest(permission, manifestPermissions) {
    manifestPermissions.push({ $: { 'android:name': permission } });
    return manifestPermissions;
}
exports.addPermissionToManifest = addPermissionToManifest;
//# sourceMappingURL=Permissions.js.map