"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function getBranchApiKey(config) {
    var _a, _b, _c, _d;
    return _d = (_c = (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.branch) === null || _c === void 0 ? void 0 : _c.apiKey, (_d !== null && _d !== void 0 ? _d : null);
}
exports.getBranchApiKey = getBranchApiKey;
function setBranchApiKey(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        const apiKey = getBranchApiKey(config);
        if (!apiKey) {
            return manifestDocument;
        }
        let mainApplication = manifestDocument.manifest.application.filter((e) => e['$']['android:name'] === '.MainApplication')[0];
        let existingBranchApiKeyItem;
        const newBranchApiKeyItem = {
            $: {
                'android:name': 'io.branch.sdk.BranchKey',
                'android:value': apiKey,
            },
        };
        if (mainApplication.hasOwnProperty('meta-data')) {
            existingBranchApiKeyItem = mainApplication['meta-data'].filter((e) => e['$']['android:name'] === 'io.branch.sdk.BranchKey');
            if (existingBranchApiKeyItem.length) {
                existingBranchApiKeyItem[0]['$']['android:value'] = apiKey;
            }
            else {
                mainApplication['meta-data'].push(newBranchApiKeyItem);
            }
        }
        else {
            mainApplication['meta-data'] = [newBranchApiKeyItem];
        }
        return manifestDocument;
    });
}
exports.setBranchApiKey = setBranchApiKey;
//# sourceMappingURL=Branch.js.map