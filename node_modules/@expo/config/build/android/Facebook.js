"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js_1 = require("xml2js");
const Strings_1 = require("./Strings");
const facebookSchemeActivity = (scheme) => `
<activity
    android:name="com.facebook.CustomTabActivity"
    android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="${scheme}" />
    </intent-filter>
</activity>
`;
function getFacebookScheme(config) {
    var _a;
    return _a = config.facebookScheme, (_a !== null && _a !== void 0 ? _a : null);
}
exports.getFacebookScheme = getFacebookScheme;
function getFacebookAppId(config) {
    var _a;
    return _a = config.facebookAppId, (_a !== null && _a !== void 0 ? _a : null);
}
exports.getFacebookAppId = getFacebookAppId;
function getFacebookDisplayName(config) {
    var _a;
    return _a = config.facebookDisplayName, (_a !== null && _a !== void 0 ? _a : null);
}
exports.getFacebookDisplayName = getFacebookDisplayName;
function getFacebookAutoInitEnabled(config) {
    return config.hasOwnProperty('facebookAutoInitEnabled') ? config.facebookAutoInitEnabled : null;
}
exports.getFacebookAutoInitEnabled = getFacebookAutoInitEnabled;
function getFacebookAutoLogAppEvents(config) {
    return config.hasOwnProperty('facebookAutoLogAppEventsEnabled')
        ? config.facebookAutoLogAppEventsEnabled
        : null;
}
exports.getFacebookAutoLogAppEvents = getFacebookAutoLogAppEvents;
function getFacebookAdvertiserIDCollection(config) {
    return config.hasOwnProperty('facebookAdvertiserIDCollectionEnabled')
        ? config.facebookAdvertiserIDCollectionEnabled
        : null;
}
exports.getFacebookAdvertiserIDCollection = getFacebookAdvertiserIDCollection;
function setFacebookAppIdString(config, projectDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        const appId = getFacebookAppId(config);
        if (!appId) {
            return false;
        }
        const stringsPath = yield Strings_1.getProjectStringsXMLPathAsync(projectDirectory);
        if (!stringsPath) {
            throw new Error(`There was a problem setting your Facebook App ID in ${stringsPath}.`);
        }
        let stringsJSON = yield Strings_1.readStringsXMLAsync(stringsPath);
        let stringItemToAdd = [{ _: appId, $: { name: 'facebook_app_id' } }];
        stringsJSON = Strings_1.setStringItem(stringItemToAdd, stringsJSON);
        try {
            yield Strings_1.writeStringsXMLAsync(stringsPath, stringsJSON);
        }
        catch (e) {
            throw new Error(`Error setting facebookAppId. Cannot write strings.xml to ${stringsPath}.`);
        }
        return true;
    });
}
exports.setFacebookAppIdString = setFacebookAppIdString;
function setFacebookConfig(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        const scheme = getFacebookScheme(config);
        const appId = getFacebookAppId(config);
        const displayName = getFacebookDisplayName(config);
        const autoInitEnabled = getFacebookAutoInitEnabled(config);
        const autoLogAppEvents = getFacebookAutoLogAppEvents(config);
        const advertiserIdCollection = getFacebookAdvertiserIDCollection(config);
        let mainApplication = manifestDocument.manifest.application.filter((e) => e['$']['android:name'] === '.MainApplication')[0];
        if (scheme) {
            const facebookSchemeActivityXML = facebookSchemeActivity(scheme);
            const parser = new xml2js_1.Parser();
            const facebookSchemeActivityJSON = yield parser.parseStringPromise(facebookSchemeActivityXML);
            //TODO: don't write if facebook scheme activity is already present
            if (mainApplication.hasOwnProperty('activity')) {
                mainApplication['activity'] = mainApplication['activity'].concat(facebookSchemeActivityJSON['activity']);
            }
            else {
                mainApplication['activity'] = facebookSchemeActivityJSON['activity'];
            }
        }
        if (appId) {
            mainApplication = addMetaDataItemToMainApplication(mainApplication, 'com.facebook.sdk.ApplicationId', '@string/facebook_app_id' // The corresponding string is set in setFacebookAppIdString
            );
        }
        if (displayName) {
            mainApplication = addMetaDataItemToMainApplication(mainApplication, 'com.facebook.sdk.ApplicationName', displayName);
        }
        if (autoInitEnabled !== null) {
            mainApplication = addMetaDataItemToMainApplication(mainApplication, 'com.facebook.sdk.AutoInitEnabled', autoInitEnabled ? 'true' : 'false');
        }
        if (autoLogAppEvents !== null) {
            mainApplication = addMetaDataItemToMainApplication(mainApplication, 'com.facebook.sdk.AutoLogAppEventsEnabled', autoLogAppEvents ? 'true' : 'false');
        }
        if (advertiserIdCollection !== null) {
            mainApplication = addMetaDataItemToMainApplication(mainApplication, 'com.facebook.sdk.AdvertiserIDCollectionEnabled', advertiserIdCollection ? 'true' : 'false');
        }
        return manifestDocument;
    });
}
exports.setFacebookConfig = setFacebookConfig;
function addMetaDataItemToMainApplication(mainApplication, itemName, itemValue) {
    let existingMetaDataItem;
    const newItem = {
        $: {
            'android:name': itemName,
            'android:value': itemValue,
        },
    };
    if (mainApplication.hasOwnProperty('meta-data')) {
        existingMetaDataItem = mainApplication['meta-data'].filter((e) => e['$']['android:name'] === itemName);
        if (existingMetaDataItem.length) {
            existingMetaDataItem[0]['$']['android:value'] = itemValue;
        }
        else {
            mainApplication['meta-data'].push(newItem);
        }
    }
    else {
        mainApplication['meta-data'] = [newItem];
    }
    return mainApplication;
}
//# sourceMappingURL=Facebook.js.map