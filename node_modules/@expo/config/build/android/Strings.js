"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const xml2js_1 = require("xml2js");
const BASE_STRINGS_XML = `<resources></resources>`;
function getProjectStringsXMLPathAsync(projectDir) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const shellPath = path_1.default.join(projectDir, 'android');
            if ((yield fs_extra_1.default.stat(shellPath)).isDirectory()) {
                const stringsPath = path_1.default.join(shellPath, 'app/src/main/res/values/strings.xml');
                yield fs_extra_1.default.ensureFile(stringsPath);
                return stringsPath;
            }
        }
        catch (error) {
            throw new Error('No android directory found in your project.');
        }
        return null;
    });
}
exports.getProjectStringsXMLPathAsync = getProjectStringsXMLPathAsync;
function readStringsXMLAsync(stringsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const contents = yield fs_extra_1.default.readFile(stringsPath, { encoding: 'utf8', flag: 'r' });
        const parser = new xml2js_1.Parser();
        const manifest = parser.parseStringPromise(contents || BASE_STRINGS_XML);
        return manifest;
    });
}
exports.readStringsXMLAsync = readStringsXMLAsync;
function writeStringsXMLAsync(stringsPath, stringsContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const stringsXml = new xml2js_1.Builder().buildObject(stringsContent);
        yield fs_extra_1.default.ensureDir(path_1.default.dirname(stringsPath));
        yield fs_extra_1.default.writeFile(stringsPath, stringsXml);
    });
}
exports.writeStringsXMLAsync = writeStringsXMLAsync;
function setStringItem(itemToAdd, stringFileContentsJSON) {
    if (stringFileContentsJSON.resources.string) {
        let stringNameExists = stringFileContentsJSON.resources.string.filter((e) => e['$'].name === itemToAdd[0]['$'].name)[0];
        if (stringNameExists) {
            // replace the previous value
            stringNameExists['_'] = itemToAdd[0]['_'];
        }
        else {
            stringFileContentsJSON.resources.string = stringFileContentsJSON.resources.string.concat(itemToAdd);
        }
    }
    else {
        if (typeof stringFileContentsJSON.resources === 'string') {
            // file was empty and JSON is `{resources : ''}`
            stringFileContentsJSON.resources = {};
        }
        stringFileContentsJSON.resources.string = itemToAdd;
    }
    return stringFileContentsJSON;
}
exports.setStringItem = setStringItem;
//# sourceMappingURL=Strings.js.map