"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const xml2js_1 = require("xml2js");
function getProjectStylesXMLPathAsync(projectDir) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const shellPath = path_1.default.join(projectDir, 'android');
            if ((yield fs_extra_1.default.stat(shellPath)).isDirectory()) {
                const stylesPath = path_1.default.join(shellPath, 'app/src/main/res/values/styles.xml');
                yield fs_extra_1.default.ensureFile(stylesPath);
                return stylesPath;
            }
        }
        catch (error) {
            throw new Error(`Could not create android/app/src/main/res/values/styles.xml`);
        }
        return null;
    });
}
exports.getProjectStylesXMLPathAsync = getProjectStylesXMLPathAsync;
function readStylesXMLAsync(stylesPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const contents = yield fs_extra_1.default.readFile(stylesPath, { encoding: 'utf8', flag: 'r' });
        const parser = new xml2js_1.Parser();
        const manifest = parser.parseStringPromise(contents);
        return manifest;
    });
}
exports.readStylesXMLAsync = readStylesXMLAsync;
function writeStylesXMLAsync(stylesPath, stylesContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const stylesXml = new xml2js_1.Builder().buildObject(stylesContent);
        yield fs_extra_1.default.ensureDir(path_1.default.dirname(stylesPath));
        yield fs_extra_1.default.writeFile(stylesPath, stylesXml);
    });
}
exports.writeStylesXMLAsync = writeStylesXMLAsync;
function setStylesItem(itemToAdd, styleFileContentsJSON) {
    let appTheme = styleFileContentsJSON.resources.style.filter((e) => e['$']['name'] === 'AppTheme')[0];
    if (appTheme.item) {
        let existingItem = appTheme.item.filter((item) => item['$'].name === itemToAdd[0].$.name)[0];
        // Don't want to 2 of the same item, so if one exists, we overwrite it
        if (existingItem) {
            existingItem['_'] = itemToAdd[0]['_'];
        }
        else {
            appTheme.item = appTheme.item.concat(itemToAdd);
        }
    }
    else {
        appTheme.item = itemToAdd;
    }
    return styleFileContentsJSON;
}
exports.setStylesItem = setStylesItem;
//# sourceMappingURL=Styles.js.map