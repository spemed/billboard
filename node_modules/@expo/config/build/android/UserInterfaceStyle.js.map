{"version":3,"file":"UserInterfaceStyle.js","sourceRoot":"","sources":["../../src/android/UserInterfaceStyle.ts"],"names":[],"mappings":";;;;;;;;;;;AAGa,QAAA,wBAAwB,GAAG,uBAAuB,CAAC;AAEnD,QAAA,wBAAwB,GAAG;;;;;;;;;;;CAWvC,CAAC;AAEF,SAAgB,qBAAqB,CAAC,MAAkB;;IACtD,IAAI,MAAM,eAAG,MAAM,CAAC,OAAO,0CAAE,kBAAkB,uCAAI,MAAM,CAAC,kBAAkB,EAAA,CAAC;IAC7E,QAAO,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,IAAI,EAAC;AACxB,CAAC;AAHD,sDAGC;AAED,SAAsB,wBAAwB,CAAC,MAAkB,EAAE,gBAA0B;;QAC3F,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,gBAAgB,CAAC;SACzB;QAED,IAAI,YAAY,GAAG,gBAAgB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CACzE,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,eAAe,CACvD,CAAC;QACF,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,gCAAwB,CAAC;YAC5C,uDAAuD,CAAC;QAE1D,OAAO,gBAAgB,CAAC;IAC1B,CAAC;CAAA;AAbD,4DAaC;AAED,SAAgB,qCAAqC,CACnD,MAAkB,EAClB,YAAoB;;IAEpB,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACvD,IAAI,CAAC,kBAAkB,EAAE;QACvB,OAAO,YAAY,CAAC;KACrB;IAED,qGAAqG;IACrG,UAAI,YAAY,CAAC,KAAK,CAAC,wBAAwB,CAAC,0CAAE,MAAM,EAAE;QACxD,OAAO,YAAY,CAAC;KACrB;IACD,IAAI,OAAO,GAAG,IAAI,MAAM,CAAC,mDAAmD,CAAC,CAAC;IAC9E,OAAO,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,gCAAwB,CAAC,CAAC;AACjE,CAAC;AAfD,sFAeC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { Document } from './Manifest';\n\nexport const CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';\n\nexport const ON_CONFIGURATION_CHANGED = `\npublic class MainActivity extends ReactActivity {\n\n    // Added automatically by Expo Config\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Intent intent = new Intent(\"onConfigurationChanged\");\n        intent.putExtra(\"newConfig\", newConfig);\n        sendBroadcast(intent);\n    }\n`;\n\nexport function getUserInterfaceStyle(config: ExpoConfig): string {\n  let result = config.android?.userInterfaceStyle ?? config.userInterfaceStyle;\n  return result ?? null;\n}\n\nexport async function setUiModeAndroidManifest(config: ExpoConfig, manifestDocument: Document) {\n  let userInterfaceStyle = getUserInterfaceStyle(config);\n  if (!userInterfaceStyle) {\n    return manifestDocument;\n  }\n\n  let mainActivity = manifestDocument.manifest.application[0].activity.filter(\n    (e: any) => e['$']['android:name'] === '.MainActivity'\n  );\n  mainActivity[0]['$'][CONFIG_CHANGES_ATTRIBUTE] =\n    'keyboard|keyboardHidden|orientation|screenSize|uiMode';\n\n  return manifestDocument;\n}\n\nexport function addOnConfigurationChangedMainActivity(\n  config: ExpoConfig,\n  MainActivity: string\n): string {\n  let userInterfaceStyle = getUserInterfaceStyle(config);\n  if (!userInterfaceStyle) {\n    return MainActivity;\n  }\n\n  // Cruzan: this is not ideal, but I'm not sure of a better way to handle writing to MainActivity.java\n  if (MainActivity.match(`onConfigurationChanged`)?.length) {\n    return MainActivity;\n  }\n  let pattern = new RegExp(`public class MainActivity extends ReactActivity {`);\n  return MainActivity.replace(pattern, ON_CONFIGURATION_CHANGED);\n}\n"]}