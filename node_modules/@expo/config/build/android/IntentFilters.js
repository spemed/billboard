"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const xml2js_1 = require("xml2js");
// TODO: make it so intent filters aren't written again if you run the command again
function getIntentFilters(config) {
    var _a, _b;
    return _b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.intentFilters, (_b !== null && _b !== void 0 ? _b : []);
}
exports.getIntentFilters = getIntentFilters;
function setAndroidIntentFilters(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        const intentFilters = getIntentFilters(config);
        if (!intentFilters.length) {
            return manifestDocument;
        }
        let intentFiltersXML = renderIntentFilters(intentFilters).join('');
        const parser = new xml2js_1.Parser();
        const intentFiltersJSON = yield parser.parseStringPromise(intentFiltersXML);
        let mainActivity = manifestDocument.manifest.application[0].activity.filter((e) => e['$']['android:name'] === '.MainActivity');
        mainActivity[0]['intent-filter'] = mainActivity[0]['intent-filter'].concat(intentFiltersJSON['intent-filter']);
        return manifestDocument;
    });
}
exports.setAndroidIntentFilters = setAndroidIntentFilters;
function renderIntentFilters(intentFilters) {
    // returns an array of <intent-filter> tags:
    // [
    //   `<intent-filter>
    //     <data android:scheme="exp"/>
    //     <data android:scheme="exps"/>
    //
    //     <action android:name="android.intent.action.VIEW"/>
    //
    //     <category android:name="android.intent.category.DEFAULT"/>
    //     <category android:name="android.intent.category.BROWSABLE"/>
    //   </intent-filter>`,
    //   ...
    // ]
    return intentFilters.map((intentFilter) => {
        const autoVerify = intentFilter.autoVerify ? ' android:autoVerify="true"' : '';
        return `<intent-filter${autoVerify}>
      ${renderIntentFilterData(intentFilter.data)}
      <action android:name="android.intent.action.${intentFilter.action}"/>
      ${renderIntentFilterCategory(intentFilter.category)}
    </intent-filter>`;
    });
}
exports.default = renderIntentFilters;
function renderIntentFilterDatumEntries(datum) {
    return lodash_1.default.toPairs(datum)
        .map(entry => `android:${entry[0]}="${entry[1]}"`)
        .join(' ');
}
function renderIntentFilterData(data) {
    return (Array.isArray(data) ? data : [data])
        .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)
        .join('\n');
}
function renderIntentFilterCategory(category) {
    return (Array.isArray(category) ? category : [category])
        .map(cat => `<category android:name="android.intent.category.${cat}"/>`)
        .join('\n');
}
//# sourceMappingURL=IntentFilters.js.map