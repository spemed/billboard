"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Styles_1 = require("./Styles");
const Colors_1 = require("./Colors");
const COLOR_PRIMARY_KEY = 'colorPrimary';
const DEFAULT_PRIMARY_COLOR = '#023c69';
function getPrimaryColor(config) {
    var _a;
    return _a = config.primaryColor, (_a !== null && _a !== void 0 ? _a : DEFAULT_PRIMARY_COLOR);
}
exports.getPrimaryColor = getPrimaryColor;
function setPrimaryColor(config, projectDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        let hexString = getPrimaryColor(config);
        const stylesPath = yield Styles_1.getProjectStylesXMLPathAsync(projectDirectory);
        const colorsPath = yield Colors_1.getProjectColorsXMLPathAsync(projectDirectory);
        if (!colorsPath || !stylesPath) {
            return false;
        }
        let stylesJSON = yield Styles_1.readStylesXMLAsync(stylesPath);
        let colorsJSON = yield Colors_1.readColorsXMLAsync(colorsPath);
        let colorItemToAdd = [{ _: '', $: { name: '' } }];
        let styleItemToAdd = [{ _: '', $: { name: '' } }];
        colorItemToAdd[0]._ = hexString;
        colorItemToAdd[0].$.name = COLOR_PRIMARY_KEY;
        styleItemToAdd[0]._ = `@color/${COLOR_PRIMARY_KEY}`;
        styleItemToAdd[0].$.name = COLOR_PRIMARY_KEY;
        colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);
        stylesJSON = Styles_1.setStylesItem(styleItemToAdd, stylesJSON);
        try {
            yield Colors_1.writeColorsXMLAsync(colorsPath, colorsJSON);
            yield Styles_1.writeStylesXMLAsync(stylesPath, stylesJSON);
        }
        catch (e) {
            throw new Error(`Error setting Android primary color. Cannot write new styles.xml to ${stylesPath}.`);
        }
        return true;
    });
}
exports.setPrimaryColor = setPrimaryColor;
//# sourceMappingURL=PrimaryColor.js.map