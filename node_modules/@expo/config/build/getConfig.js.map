{"version":3,"file":"getConfig.js","sourceRoot":"","sources":["../src/getConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { spawnSync } from 'child_process';\nimport { formatExecError } from 'jest-message-util';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError, errorFromJSON } from './Errors';\nimport { fileExists } from './Modules';\nimport { serializeAndEvaluate } from './Serialize';\n\nfunction isMissingFileCode(code: string): boolean {\n  return ['ENOENT', 'MODULE_NOT_FOUND', 'ENOTDIR'].includes(code);\n}\n\nfunction readConfigFile(\n  configFilePath: string,\n  context: ConfigContext\n): null | Partial<ExpoConfig> {\n  if (!fileExists(configFilePath)) return null;\n\n  try {\n    return evalConfig(configFilePath, context);\n  } catch (error) {\n    // If the file doesn't exist then we should skip it and continue searching.\n    if (!isMissingFileCode(error.code)) {\n      throw error;\n    }\n  }\n  return null;\n}\n\nexport function getDynamicConfig(\n  configPath: string,\n  request: ConfigContext\n): AppJSONConfig | ExpoConfig | null {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    return serializeAndEvaluate(config);\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig | null {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return serializeAndEvaluate(config);\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction evalConfig(configFile: string, request: ConfigContext): Partial<ExpoConfig> {\n  try {\n    const spawnResults = spawnSync(\n      'node',\n      [\n        require.resolve('@expo/config/build/scripts/read-config.js'),\n        '--colors',\n        configFile,\n        JSON.stringify({ ...request, config: serializeAndEvaluate(request.config) }),\n      ],\n      {}\n    );\n\n    if (spawnResults.status === 0) {\n      const spawnResultString = spawnResults.stdout.toString('utf8').trim();\n      const logs = spawnResultString.split('\\n');\n      // Get the last console log to prevent parsing anything logged in the config.\n      const lastLog = logs.pop()!;\n      for (const log of logs) {\n        // Log out the logs from the config\n        console.log(log);\n      }\n      // Parse the final log of the script, it's the serialized config\n      return JSON.parse(lastLog);\n    } else {\n      // Parse the error data and throw it as expected\n      const errorData = JSON.parse(spawnResults.stderr.toString('utf8'));\n      throw errorFromJSON(errorData);\n    }\n  } catch (error) {\n    if (isMissingFileCode(error.code) || !(error instanceof SyntaxError)) {\n      throw error;\n    }\n    const message = formatExecError(\n      error,\n      { rootDir: request.projectRoot, testMatch: [] },\n      { noStackTrace: true },\n      undefined,\n      true\n    );\n    throw new ConfigError(`\\n${message}`, 'INVALID_CONFIG');\n  }\n}\n"]}